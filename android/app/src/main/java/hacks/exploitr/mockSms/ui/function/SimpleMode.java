package hacks.exploitr.mockSms.ui.function;

import android.annotation.SuppressLint;
import android.app.role.RoleManager;
import android.content.Intent;
import android.database.Cursor;
import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.provider.Telephony;
import android.view.MotionEvent;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.databinding.DataBindingUtil;

import com.google.android.gms.ads.AdRequest;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.textfield.TextInputEditText;

import java.util.Objects;

import hacks.exploitr.mockSms.constants.SMSData;
import hacks.exploitr.mockSms.constants.SimpleValues;
import hacks.exploitr.mockSms.helpers.Dbms;
import hacks.exploitr.mockSms.helpers.SMSCreator;
import hacks.exploitr.mockSms.helpers.Utils;
import hacks.exploitr.mockSms.R;
import hacks.exploitr.mockSms.databinding.ActivitySimpleModeBinding;
import hacks.exploitr.mockSms.ui.primary.ModeChooser;

@SuppressLint("ClickableViewAccessibility")
public class SimpleMode extends AppCompatActivity {

	ActivitySimpleModeBinding binding;

	ActivityResultLauncher<Intent> pickTac;
	ActivityResultLauncher<Intent> launchChangeMock;
	ActivityResultLauncher<Intent> launchChangeDefault;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		declareContactResult();
		requestForChangeIntentToMockSMS();
		requestForChangeIntentToDefault();

		binding = DataBindingUtil.setContentView(this, R.layout.activity_simple_mode);
		binding.saveSmsConfirm.setOnClickListener(v -> createSMSInternal());
		binding.senderPhoneNumber.setOnTouchListener((v, event) -> {
			if (event.getAction() == MotionEvent.ACTION_UP) {
				if (event.getRawX() >= (v.getRight() - ((TextInputEditText) v)
						.getCompoundDrawables()[SimpleValues.DRAWABLE_RIGHT].getBounds().width())) {
					pickContact();
					return true;
				}
			}
			return false;
		});

		checkLoadAds();
	}

	private void pickContact() {
		Intent intent = new Intent(Intent.ACTION_PICK);
		intent.setType(ContactsContract.CommonDataKinds.Phone.CONTENT_TYPE);
		pickTac.launch(intent);
	}

	/*
	* We check of the inputs are valid or not
	* */
	private void createSMSInternal() {
		String num = Objects.requireNonNull(binding.senderPhoneNumber.getText()).toString();
		String msg = Objects.requireNonNull(binding.senderMessage.getText()).toString();
		if (num.isEmpty() || msg.isEmpty()) {
			Snackbar.make(binding.saveSmsConfirm, "Please fill in all the details", Snackbar.LENGTH_SHORT).show();
			binding.saveSmsConfirm.resetSlider();
		} else {
			createSMSPreparation();
		}
	}

	/*
	* Switch default sms app and go {@link hacks.exploitr.mockSms.ui.function#createSMSActual()}
	* */

	private void createSMSPreparation() {
		String DEF_PKG = Telephony.Sms.getDefaultSmsPackage(getApplicationContext());
		if (Dbms.getInstance(this).getDefaultPackage() == null)
			Dbms.getInstance(this).setDefaultPackage(DEF_PKG);

		if (Objects.equals(DEF_PKG, getPackageName())) {
			createSMSActual();
		} else {
			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
				RoleManager roleManager = getSystemService(RoleManager.class);
				if (roleManager.isRoleAvailable(RoleManager.ROLE_SMS)) {
					if (!roleManager.isRoleHeld(RoleManager.ROLE_SMS)) {
						Intent intent = roleManager.createRequestRoleIntent(RoleManager.ROLE_SMS);
						launchChangeMock.launch(intent);
					} else {
						createSMSActual();
					}
				}
			} else {
				Intent intent = new Intent("android.provider.Telephony.ACTION_CHANGE_DEFAULT")
						.putExtra("package", getPackageName());
				launchChangeMock.launch(intent);
			}
		}
	}

	/*
	* all checks done, try writing to db and revert
	* */
	private void createSMSActual() {
		writeSMS();

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
			RoleManager roleManager = getSystemService(RoleManager.class);
			if (roleManager.isRoleAvailable(RoleManager.ROLE_SMS)) {
				if (roleManager.isRoleHeld(RoleManager.ROLE_SMS)) {
					Snackbar.make(binding.saveSmsConfirm,
							"Switch to default SMS application and set it as default!", Snackbar.LENGTH_SHORT)
							.show();
				}
			}
		} else {
			Intent intent = new Intent("android.provider.Telephony.ACTION_CHANGE_DEFAULT")
					.putExtra("package", Dbms.getInstance(this).getDefaultPackage());
			launchChangeDefault.launch(intent);
		}
	}

	/*
	* main calling method to actual writer
	* */
	private void writeSMS() {
		SMSCreator.createSimple(
				Objects.requireNonNull(binding.senderPhoneNumber.getText()).toString(),
				SMSData.MESSAGE_TYPE_INBOX,
				Objects.requireNonNull(binding.senderMessage.getText()).toString())
				.save(this, success -> Toast.makeText(SimpleMode.this,
						success ? "Create message success! (switch back to default SMS app)" :
								"Create message failed! Check permissions!",
						Toast.LENGTH_SHORT).show());
	}

	@Override
	protected void onResume() {
		Utils.enableMockO(this);
		super.onResume();
	}

	@Override
	protected void onDestroy() {
		Utils.disableMockO(this);
		super.onDestroy();
	}

	private void requestForChangeIntentToMockSMS() {
		launchChangeMock = registerForActivityResult(
				new ActivityResultContracts.StartActivityForResult(),
				result -> {
					if (result.getResultCode() == RESULT_OK) {
						createSMSActual();
					} else {
						Snackbar.make(binding.saveSmsConfirm, "MockSMS needs to be default SMS app to work!", Snackbar.LENGTH_SHORT)
								.show();
					}
				}
		);
	}

	private void requestForChangeIntentToDefault() {
		launchChangeDefault = registerForActivityResult(
				new ActivityResultContracts.StartActivityForResult(),
				result -> {
					if (result.getResultCode() == RESULT_OK) {
						Snackbar.make(binding.saveSmsConfirm, "Successfully switched to default SMS app.", Snackbar.LENGTH_SHORT)
								.show();
					} else {
						Snackbar.make(binding.saveSmsConfirm, "Cancelled! Please switch to default SMS app by opening it.", Snackbar.LENGTH_SHORT)
								.show();
					}
				}
		);
	}

	private void checkLoadAds() {
		if (checkAds()) {
			AdRequest adRequest = new AdRequest.Builder().build();
			binding.adView.loadAd(adRequest);
		}
	}

	private boolean checkAds() {
		return true; //todo highlight
	}

	@Override
	public void onBackPressed() {
		startActivity(new Intent(this, ModeChooser.class));
		finish();
		super.onBackPressed();
	}

	private void declareContactResult() {
		pickTac = registerForActivityResult(
				new ActivityResultContracts.StartActivityForResult(),
				result -> {
					if (result.getResultCode() == AppCompatActivity.RESULT_OK) {
						Intent data = result.getData();
						if (data != null) {
							String[] projection = new String[]{ContactsContract.CommonDataKinds.Phone.NUMBER};
							String sort = ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY + " ASC";
							Cursor cursor = getContentResolver().query(data.getData(), projection,
									null, null, sort);
							if (cursor != null && cursor.moveToFirst()) {
								int numberIndex = cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);
								String number = cursor.getString(numberIndex);
								binding.senderPhoneNumber.setText(number.replaceAll("\\s+", ""));
								cursor.close();
							}
						} else {
							Toast.makeText(this.getBaseContext(), "Invalid Number", Toast.LENGTH_SHORT).show();
						}
					}
				}
		);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {

		super.onActivityResult(requestCode, resultCode, data);
 /*else if (requestCode == CHANGE_FROM_DEF) {
			if (resultCode == RESULT_OK) {
				doCreateSmsAndChangeDef();
			} else {
				Toast.makeText(this, "Permission Denied. Did you really need it to do ? " + new String(Character.toChars(128529)), Toast.LENGTH_SHORT).show();
			}
		} else if (requestCode == REQ_PERM) {
			if (resultCode != PackageManager.PERMISSION_GRANTED) {
				Toast.makeText(this, "MockSMS requires permissions to be granted to work " + new String(Character.toChars(128529)), Toast.LENGTH_SHORT).show();
				finish();
			}
		} else if (requestCode == CHANGE_TO_DEF) {
			if (resultCode == RESULT_OK) {
				Toast.makeText(getBaseContext(),
						"Done Creating Fake SMS " + new String(Character.toChars(128520)), Toast.LENGTH_LONG).show();
			} else {
				Toast.makeText(getBaseContext(),
						"Done Creating Fake SMS " + new String(Character.toChars(128520)), Toast.LENGTH_LONG).show();
				showDialogChange();
			}
		}*/
	}
}