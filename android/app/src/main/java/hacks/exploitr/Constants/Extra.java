package hacks.exploitr.Constants;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Build;
import android.preference.PreferenceManager;

import androidx.annotation.Keep;

import java.security.SecureRandom;
import java.util.concurrent.ThreadLocalRandom;

@Keep
public class Extra {

    //TODO https://github.com/aosp-mirror/platform_frameworks_base/blob/master/telephony/java/com/android/internal/telephony/TelephonyProperties.java

    private static final String SIM_SLOT = "_slot_bool";
    private static final String SIM_IMSI = "_imsi_bool";
    private static final String SERVICE_CENTER = "_center";
    private static final String TIME_DIFFERENCE = "_difference";
    private static final String SMS_STATUS = "_status";
    private static final String READ = "_read";
    private static final String SEEN = "_seen";
    private static final String DELIVERED = "_delivered";
    private static final String SLOT = "_slot";
    private static final String IMSI = "_imsi";
    private static final String REPLY_PATH = "reply_path";
    private static final String SERVICE_CENTER_BOOL = "service_center";
    private static final String TIME_DIFFERENCE_BOOL = "_difference_bool";
    private static final String SMS_STATUS_BOOL = "_status_bool";
    private static final String OLD = "_age";
    private static final String COUNT = "count";
    private static Extra instance;
    private final SharedPreferences sharedPreferences;

    private Extra(Context context) {
        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
    }

    public static Extra getInstance(Context context) {
        if (instance == null) {
            instance = new Extra(context);
        }
        return instance;
    }

    private long getLongRandomForServiceNumber() {
        long z = new SecureRandom().nextInt(100) * 1234 * 80000;
        return z > 0 ? z : (z * -1);
    }

    public boolean isRead() {
        return sharedPreferences.getBoolean(READ, false);
    }

    public void setRead(boolean read) {
        sharedPreferences.edit().putBoolean(READ, read).apply();
    }

    public boolean isSeen() {
        return sharedPreferences.getBoolean(SEEN, false);
    }

    public void setSeen(boolean what) {
        sharedPreferences.edit().putBoolean(SEEN, what).apply();
    }

    public boolean isDelivered() {
        return sharedPreferences.getBoolean(DELIVERED, false);
    }

    public void setDelivered(boolean what) {
        sharedPreferences.edit().putBoolean(DELIVERED, what).apply();
    }

    public boolean isSLOT_ENABLED() {
        return sharedPreferences.getBoolean(SLOT, false);
    }

    public void setSLOT_ENABLED(boolean what) {
        sharedPreferences.edit().putBoolean(SLOT, what).apply();
    }

    public boolean isIMSI_ENABLED() {
        return sharedPreferences.getBoolean(IMSI, false);
    }

    public void setIMSI_ENABLED(boolean what) {
        sharedPreferences.edit().putBoolean(IMSI, what).apply();
    }

    public boolean isREPLY_PATH_PRESENT() {
        return sharedPreferences.getBoolean(REPLY_PATH, false);
    }

    public void setREPLY_PATH_PRESENT(boolean what) {
        sharedPreferences.edit().putBoolean(REPLY_PATH, what).apply();
    }

    public boolean isServiceCenterBool() {
        return sharedPreferences.getBoolean(SERVICE_CENTER_BOOL, false);
    }

    public void setServiceCenterBool(boolean what) {
        sharedPreferences.edit().putBoolean(SERVICE_CENTER_BOOL, what).apply();
    }

    public boolean isDifferenceEnabled() {
        return sharedPreferences.getBoolean(TIME_DIFFERENCE_BOOL, false);
    }

    public void setTimeDifferenceBool(boolean what) {
        sharedPreferences.edit().putBoolean(TIME_DIFFERENCE_BOOL, what).apply();
    }

    public boolean isSMSStatusEnabled() {
        return sharedPreferences.getBoolean(SMS_STATUS_BOOL, false);
    }

    public void setSmsStatusBool(boolean what) {
        sharedPreferences.edit().putBoolean(SMS_STATUS_BOOL, what).apply();
    }

    public long getSimImsi() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            return sharedPreferences.getLong(
                    SIM_IMSI,
                    ThreadLocalRandom.current().nextLong(112345678901234567L, 9223372036854775807L));
        } else {
            return sharedPreferences.getLong(SIM_IMSI, 922337203685477580L);
        }
    }

    public void setSimImsi(long simImsi) {
        sharedPreferences.edit().putLong(SIM_IMSI, simImsi).apply();
    }

    public long getServiceCenter() {
        return sharedPreferences.getLong(SERVICE_CENTER, getLongRandomForServiceNumber());
    }

    public void setServiceCenter(long serviceCenter) {
        sharedPreferences.edit().putLong(SERVICE_CENTER, serviceCenter).apply();
    }

    public int getTimeDifference() {
        return sharedPreferences.getInt(TIME_DIFFERENCE, 5);
    }

    public void setTimeDifference(int timeDifference) {
        sharedPreferences.edit().putInt(TIME_DIFFERENCE, timeDifference).apply();
    }

    public int getSmsStatus() {
        return sharedPreferences.getInt(SMS_STATUS, All.STATUS_NONE);
    }

    public void setSmsStatus(int smsStatus) {
        sharedPreferences.edit().putInt(SMS_STATUS, smsStatus).apply();
    }

    public int getSimSlot() {
        return sharedPreferences.getInt(SIM_SLOT, 1);
    }

    public void setSimSlot(int simSlot) {
        sharedPreferences.edit().putInt(SIM_SLOT, simSlot).apply();
    }

    public boolean isOLD() {
        return sharedPreferences.getBoolean(OLD, false);
    }

    public void setOld() {
        sharedPreferences.edit().putBoolean(OLD, true).apply();
    }

    public int getCount() {
        return sharedPreferences.getInt(COUNT, 0);
    }

    public void setClickCount(int count) {
        sharedPreferences.edit().putInt(COUNT, count).apply();
    }
}

